.gallery {
  // This the main gallery grid for the image items to span across
  background-color: $color-grey-light-1;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  /*
  grid-template: repeat(7, 5vw) / repeat(8, 1fr); Could also use this shorthand
  */
  grid-gap: 1.5rem;
  padding: 1.5rem;

  //Item contains the images / Each item has a modifier for the image to help define its grid area

  &__item {
    &--1 {
      grid-row: 1 / span 2;
      grid-column: 1 / span 2; // You can then define the grid area and the image will remain fitted to the grid lines exactly
    }

    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3; // Repeat above process
    }

    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / 7;
    }

    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / -1;
    }

    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }

    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }

    &--7 {
      grid-row: 4 / span 1;
      grid-column: 5 / 6;
    }

    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }

    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8;
    }

    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / 2;
    }

    &--11 {
      grid-row: 6 / -1;
      grid-column: 2 / span 2;
    }

    &--12 {
      grid-row: 6 / -1;
      grid-column: 4 / 5;
    }
    &--13 {
      grid-row: 5 / -1;
      grid-column: 5 / span 3;
    }

    &--14 {
      grid-row: 6 / -1;
      grid-column: 8 / -1;
    }
  }

  &__img {
    display: block; // Treats it as a block level element instead
    width: 100%; // These sizes need to be defined for the o'bject-fit' to work correctly
    height: 100%;
    object-fit: cover; // This fits the image to the cell due to the intrinsic aspect ratio
  }
}
